@using Tracker.Controllers
@model Tracker.Controllers.EnvelopeViewModel
@{
    ViewData["Title"] = "Envelopes";
}

@{
    switch (Model.FragmentId)
    {
        case Fragment.New: 
            <form method="post">
                <div>
                    @Html.AntiForgeryToken()
                </div>
                <div>
                    <label for="month">Month</label>
                    <input
                        id="month"
                        name="month"
                        type="month"
                        value="@Model.Envelope.Envelope.Month"
                        required
                        autofocus />
                </div>
                <div>
                    <label for="budgeted">Budgeted</label>
                    <input type="text"
                           inputmode="number"
                           pattern="^(\d+)|(\d+\.)|(\d+\.\d\d)|(\.\d\d)$"
                           required
                           name="budgeted"
                           id="budgeted"
                           value="@Model.Envelope.Envelope.Budgeted.ToString("F")"/>
                </div>
                <div>
                    <label for="category">Category</label>
                    <select id="category" name="categoryId" required>
                        @foreach (var x in Model.Categories)
                        {
                            <option value="@x.Id">@x.Name</option>
                        }
                    </select>
                </div>
                <div>
                    <button type="submit">Create</button>
                </div>
                <div>
                    <a href="/envelopes">Cancel</a>
                </div>
            </form>
        break;
            
        case Fragment.Edit:
            <form method="post">
                <div>@Html.AntiForgeryToken()</div>
                <div>
                    <label for="month">Month</label>
                    <input
                        id="month"
                        name="month"
                        type="month"
                        value="@Model.Envelope.Envelope.Month"
                        required
                        autofocus />
                </div>
                <div>
                    <label for="budgeted">Budgeted</label>
                    <input type="text"
                           inputmode="number"
                           pattern="^(\d+)|(\d+\.)|(\d+\.\d\d)|(\.\d\d)$"
                           required
                           name="budgeted"
                           id="budgeted"
                           value="@Model.Envelope.Envelope.Budgeted.ToString("F")"/>
                </div>
                <div>
                    <label for="category">Category</label>
                    <select id="category" name="categoryId" required>
                        @foreach (var x in Model.Categories)
                        {
                            if (Model.Envelope.Envelope.Category == x)
                            {
                                <option value="@x.Id" selected>@x.Name</option>
                            }
                            else
                            {
                                <option value="@x.Id">@x.Name</option>
                            }
                        }
                    </select>
                </div>
                <div>
                    <button>Update</button>
                </div>
                <div>
                    <a href="/envelopes">Cancel</a>
                </div>
            </form>
        break;
            
        case Fragment.List:
            <a href="/envelopes/add">Add Envelope</a>
            <table class="striped">
                <caption>Envelopes</caption>
                <thead>
                    <tr>
                        <th>Month</th>
                        <th>Category</th>
                        <th>Budgeted</th>
                        <th>Allocated</th>
                        <th>Balance</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var envelope in Model.Envelopes)
                {
                    <tr>
                        <td>@envelope.Envelope.Month</td>
                        <td>@envelope.Envelope.Category.Name</td>
                        <td>@envelope.Envelope.Budgeted.ToString("F")</td>
                        <td>@envelope.Envelope.Allocated.ToString("F")</td>
                        <td>@envelope.Balance.ToString("F")</td>
                        <td>
                            <a href="envelopes/@envelope.Envelope.Id/edit">Edit</a>
                        </td>
                        <td>
                            <a href="/envelopes/@envelope.Envelope.Id/delete">Delete</a>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
            <a href="/envelopes/add">Add Envelope</a>
            break;
            
        case Fragment.Details: 
            <div>@Model.Envelope.Envelope.Month</div>
            <div>@Model.Envelope.Envelope.Budgeted</div>
            <div>@Model.Envelope.Envelope.Allocated</div>
            <div>@Model.Envelope.Balance</div>
            <div>@Model.Envelope.Envelope.Category.Name</div>
            <div>
                <a href="/envelopes">Back to list</a>
            </div>
            <div>
                <a href="/envelopes/@Model.Envelope.Envelope.Id/edit">Edit</a>
            </div>
            <div>
                <a href="/envelopes/@Model.Envelope.Envelope.Id/delete">Delete</a>
            </div>
            break;
            
        case Fragment.Delete:
            <form method="post">
                <p>Are you sure you want to delete the envelope @Model.Envelope.Envelope.Month for @Model.Envelope.Envelope.Category.Name?</p>
                <button>Delete</button>
                <a href="/envelopes">Cancel</a>
            </form>
            break;
    
        default:
            throw new ArgumentOutOfRangeException();
    }
}